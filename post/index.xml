<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on belijzajac.dev</title><link>https://belijzajac.dev/post/</link><description>Recent content in Posts on belijzajac.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@belijzajac.dev (belijzajac)</managingEditor><webMaster>blog@belijzajac.dev (belijzajac)</webMaster><copyright>Copyright Â© 2024 | CC BY-NC-SA 4.0</copyright><lastBuildDate>Sat, 27 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://belijzajac.dev/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Proto-Danksharding: Speeding Up Blobs Verification</title><link>https://belijzajac.dev/proto-danksharding-speeding-up-blobs-verification/</link><pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/proto-danksharding-speeding-up-blobs-verification/</guid><description>&lt;p>&lt;img src="https://belijzajac.dev/post-images/protodanksharding.jpg" alt="protodanksharding">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The Ethereum Foundation proposed &lt;highlight>&lt;a href="https://eips.ethereum.org/EIPS/eip-4844">EIP-4844&lt;/a>&lt;/highlight> on February 25, 2022, with the objective of reducing gas fees. It introduces a new transaction type called &amp;ldquo;blob&amp;rdquo;, which is temporarily stored and committed using the KZG commitment scheme. In addition, the Ethereum Foundation developed a project called &lt;highlight>&lt;a href="https://github.com/ethereum/c-kzg-4844">c-kzg-4844&lt;/a>&lt;/highlight>, which provides a minimal implementation of the polynomial commitments API written in C. This project does not use parallelization and exposes its C API for bindings in different programming languages. Another project, called &lt;highlight>&lt;a href="https://github.com/crate-crypto/go-kzg-4844">go-kzg-4844&lt;/a>&lt;/highlight>, which uses parallelism, has been practically implemented into the Ethereum code and is rumored to be the fastest implementation of EIP-4844 thus far.&lt;/p>
&lt;p>Next week, I will be defending my thesis titled &amp;ldquo;Parallelization of the KZG10 scheme&amp;rdquo;. In my thesis, I parallelized the KZG commitment scheme and BLS12-381 elliptic curve operations, along with a subset of the EIP-4844 proposal that uses these KZG commitments. My changes were incorporated into the &lt;highlight>&lt;a href="https://github.com/grandinetech/rust-kzg">rust-kzg project&lt;/a>&lt;/highlight>, where we exported C functions through Rust to bind the parallelized functions of rust-kzg backends to those of c-kzg-4844. Fortunately, we were presented with a unique opportunity due to the go binding included in the c-kzg-4844 project. We then used this binding to benchmark our rust-kzg&amp;rsquo;s highly parallelized blst backend against their go-kzg-4844 project and assess its speed in comparison.&lt;/p>
&lt;h2 id="how-c-kzg-4844-does-things">How c-kzg-4844 does things&lt;/h2>
&lt;p>C-kzg-4844 leaves the implementation of parallelism to higher-level programming languages that use its bindings. This approach is not only simpler but also safer. The focus of c-kzg-4844 is on single-core performance, which is great for a low-latency environment.&lt;/p>
&lt;h2 id="how-go-kzg-4844-does-things">How go-kzg-4844 does things&lt;/h2>
&lt;p>Go-kzg-4844 offers the function &lt;code>VerifyBlobKZGProofBatch&lt;/code>, which is designed for single-core execution similar to c-kzg-4844. However, they also provide a parallelized version of this function called &lt;code>VerifyBlobKZGProofBatchPar&lt;/code>. This parallelized version uses go-routines to process each proof in parallel. Although not perfect, this parallel implementation is considerably faster than the sequential one.&lt;/p>
&lt;h2 id="how-we-do-things-in-rust-kzg">How we do things in rust-kzg&lt;/h2>
&lt;p>The general idea behind our approach is as follows: if the number of blobs exceeds the number of physical CPU cores, we divide the blobs into subgroups of equal size. Each CPU core then independently runs the batched algorithm. For example, consider the illustration below. If there are 64 blobs and 4 CPU cores, we create 4 groups, each containing 16 blobs. Each group is assigned to its dedicated CPU core, which handles the execution of the blob verification process. By utilizing this approach, we effectively distribute the workload across multiple CPU cores, optimizing performance and ensuring efficient verification of the blobs.&lt;/p>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/batched-blob-verification-approach.png" alt="batched-blob-verification-process">&lt;/p>
&lt;p>However, one could argue that the performance of batched blob KZG proof verification depends on how Ethereum protocol execution clients choose to utilize this approach. If clients choose to verify blobs as soon as they receive them, they would likely opt for an approach that performs single blob verification faster. However, if they decide to wait and accumulate a fixed amount of blobs before performing the verification, this approach will yield much better performance.&lt;/p>
&lt;h2 id="code-example">Code example&lt;/h2>
&lt;p>In the code snippet, there is more to the implementation, but let&amp;rsquo;s focus on illustrating the main concept of this approach:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#[cfg(feature = &lt;/span>&lt;span style="color:#b8bb26">&amp;#34;parallel&amp;#34;&lt;/span>&lt;span style="color:#8ec07c">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> num_blobs &lt;span style="color:#fe8019">=&lt;/span> blobs.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> num_cores &lt;span style="color:#fe8019">=&lt;/span> num_cpus::get_physical();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> &lt;span style="color:#fe8019">if&lt;/span> num_blobs &lt;span style="color:#fe8019">&amp;gt;&lt;/span> num_cores {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic">// Process blobs in parallel subgroups
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic">&lt;/span> &lt;span style="color:#fe8019">let&lt;/span> blobs_per_group &lt;span style="color:#fe8019">=&lt;/span> num_blobs &lt;span style="color:#fe8019">/&lt;/span> num_cores;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> blobs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> .par_chunks(blobs_per_group)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span> .enumerate()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span> .all(&lt;span style="color:#fe8019">|&lt;/span>(i, blob_group)&lt;span style="color:#fe8019">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> num_blobs_in_group &lt;span style="color:#fe8019">=&lt;/span> blob_group.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> commitment_group &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#fe8019">&amp;amp;&lt;/span>commitments_g1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span> [blobs_per_group &lt;span style="color:#fe8019">*&lt;/span> i&lt;span style="color:#fe8019">..&lt;/span>blobs_per_group &lt;span style="color:#fe8019">*&lt;/span> i &lt;span style="color:#fe8019">+&lt;/span> num_blobs_in_group];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> proof_group &lt;span style="color:#fe8019">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span> &lt;span style="color:#fe8019">&amp;amp;&lt;/span>proofs_g1[blobs_per_group &lt;span style="color:#fe8019">*&lt;/span> i&lt;span style="color:#fe8019">..&lt;/span>blobs_per_group &lt;span style="color:#fe8019">*&lt;/span> i &lt;span style="color:#fe8019">+&lt;/span> num_blobs_in_group];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> (evaluation_challenges_fr, ys_fr) &lt;span style="color:#fe8019">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">20&lt;/span>&lt;span> compute_challenges_and_evaluate_polynomial(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">21&lt;/span>&lt;span> blob_group,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">22&lt;/span>&lt;span> commitment_group,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">23&lt;/span>&lt;span> ts,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">24&lt;/span>&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">26&lt;/span>&lt;span> verify_kzg_proof_batch(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">27&lt;/span>&lt;span> commitment_group,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">28&lt;/span>&lt;span> &lt;span style="color:#fe8019">&amp;amp;&lt;/span>evaluation_challenges_fr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">29&lt;/span>&lt;span> &lt;span style="color:#fe8019">&amp;amp;&lt;/span>ys_fr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">30&lt;/span>&lt;span> proof_group,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">31&lt;/span>&lt;span> ts,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">32&lt;/span>&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">33&lt;/span>&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">34&lt;/span>&lt;span> } &lt;span style="color:#fe8019">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">35&lt;/span>&lt;span> &lt;span style="color:#928374;font-style:italic">// Each group contains either one or zero blobs, so iterate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">36&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic">&lt;/span> &lt;span style="color:#928374;font-style:italic">// over the single blob verification function in parallel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">37&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic">&lt;/span> (blobs, commitments_g1, proofs_g1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">38&lt;/span>&lt;span> .into_par_iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">39&lt;/span>&lt;span> .all(&lt;span style="color:#fe8019">|&lt;/span>(blob, commitment, proof)&lt;span style="color:#fe8019">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">40&lt;/span>&lt;span> verify_blob_kzg_proof(blob, commitment, proof, ts)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">41&lt;/span>&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">42&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">43&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When &lt;code>num_blobs &amp;gt; num_cores&lt;/code>, the code divides the blobs into parallel subgroups. The number of blobs per group is calculated based on the division. The code then iterates over each subgroup, performing various operations such as retrieving the corresponding commitment and proof groups. It also computes evaluation challenges and evaluates a polynomial using the provided data. Finally, it verifies a batch of KZG proofs using the obtained information.&lt;/p>
&lt;p>In the else statement, when the number of blobs is not greater than the number of cores, the code handles each blob individually or in groups with only one blob. It uses parallel iteration to execute the blob verification function concurrently, similar to how go-kzg-4844 handles parallelism using go-routines.&lt;/p>
&lt;h2 id="results">Results&lt;/h2>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/batched-blob-verification-results.png" alt="batched-blob-verification-results">&lt;/p>
&lt;p>Rust and Go bindings, using the rust-kzg with blst backend, verified 64 blobs on 16 cores in 29.82 ms and 30.164 ms, respectively. In comparison, the native rust-kzg accomplished this task in 18.397 ms, while the parallelized implementation of go-kzg-4844 took 48.037 ms. Itâs important to note that we only perform full error checking through the exported C API when we convert bytes to our internal types. Therefore, the performance of the native rust-kzg code is probably better because we omit those checks here, assuming we receive correct data from the byte conversion functions. With this in mind, the &lt;highlight>rust-kzg with blst backend outperformed go-kzg-4844 by approximately 161.11% in terms of speed, while its bindings were approximately 59.25% faster&lt;/highlight>.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>We potentially outperform go-kzg-4844 by approximately 59.25% within Go in batched blob KZG proof verification&lt;/li>
&lt;/ul></description></item><item><title>WisniaLang: Compiler Project</title><link>https://belijzajac.dev/wisnialang-compiler-project/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/wisnialang-compiler-project/</guid><description>&lt;p>&lt;img src="https://belijzajac.dev/post-images/dragon-maid-compiler-book.jpg" alt="dragon-book">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>For the past 3 years, I have been working on the &lt;highlight>&lt;a href="https://github.com/belijzajac/WisniaLang">WisniaLang&lt;/a>&lt;/highlight> compiler for an experimental programming language that compiles to native machine code. It focuses on delivering tiny Linux binaries (&lt;code>ELF&lt;/code> &lt;code>x86_64&lt;/code>) with no LLVM dependency. As a result, what it actually competes with is the LLVM toolchain, on which a large number of other programming languages rely extensively.&lt;/p>
&lt;p>The reason for focusing on the delivery of small binaries with no LLVM dependency is to offer an alternative to the LLVM toolchain. While LLVM is a powerful and widely-used toolchain, it can be quite resource-intensive and may not be suitable for all scenarios. By offering a compiler that can produce efficient machine code without the need for LLVM, my aim is to provide a more lightweight and flexible solution for those who need it.&lt;/p>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/wisnialang-architecture.png" alt="architecture">&lt;/p>
&lt;p>The architecture of the compiler consists of several main phases, which work together to perform this translation. These phases include lexical analysis, which breaks the source code down into smaller units called tokens; syntactic analysis, which builds a representation of the structure of the source code called an abstract syntax tree (AST); semantic analysis, which checks the AST for semantic errors and performs type checking; intermediate representation (IR), which represents the code in a lower-level form that is easier for the compiler to work with; code generation, which generates machine code from the IR; optimization, which improves the performance of the machine code; and linking, which combines the machine code to create a complete executable program in ELF (Executable and Linking Format) format.&lt;/p>
&lt;h2 id="programming-languages-and-llvm">Programming languages and LLVM&lt;/h2>
&lt;p>Before going further, let me get straight to the point:&lt;/p>
&lt;ol>
&lt;li>Writing compilers is easy&lt;/li>
&lt;li>Optimizing the machine code is hard&lt;/li>
&lt;li>Supporting arbitrary architectures / operating systems is hard&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/llvm-approach.png" alt="llvm-approach">&lt;/p>
&lt;p>This is where LLVM comes in handy. LLVM uses an intermediate representation language, which is kind of similar to assembly, but with a few higher level constructs. LLVM is good at optimizing this IR language, as well as compiling into different architecture and binary formats. So as a language author using LLVM, I&amp;rsquo;m really writing a transpiler from my language to LLVM IR, and letting the LLVM compiler do the hard work.&lt;/p>
&lt;center>&lt;img src="https://belijzajac.dev/post-images/wisnialang-approach.png">&lt;/center>
&lt;br>
&lt;p>WisniaLang is an amateurish project that takes a more traditional approach to compiler design compared to other LLVM-based programming languages. Despite its amateur status, WisniaLang still follows the same front-end procedures as other programming languages in the LLVM family. However, it differs in the way it handles certain tasks, such as register allocation, machine code generation, and ELF binary format construction. Instead of relying on LLVM or other external tools for these tasks, WisniaLang handles them on its own. This approach allows WisniaLang to have more control over the compilation process, but it also requires more work and expertise on the part of its developers.&lt;/p>
&lt;h2 id="example-programs">Example programs&lt;/h2>
&lt;p>Let&amp;rsquo;s take a look at simple programs and see how a handwritten compiler compares to Rust, an LLVM-based programming language. Both compilers generate the identical number sequence, &lt;code>3000 2997 ... 6 3 1&lt;/code>, for both programs.&lt;/p>
&lt;table>
&lt;tr>&lt;th>WisniaLang&lt;/th>&lt;th>Rust&lt;/th>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">foo&lt;/span>(base: int, number: int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> (number) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> print(base &lt;span style="color:#fe8019">*&lt;/span> number, &lt;span style="color:#b8bb26">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> foo(base, number &lt;span style="color:#fe8019">-&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> foo(&lt;span style="color:#d3869b">3&lt;/span>, &lt;span style="color:#d3869b">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> print(&lt;span style="color:#b8bb26">&amp;#34;1&lt;/span>&lt;span style="color:#b8bb26">\n&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">foo&lt;/span>(base: &lt;span style="color:#fabd2f">u16&lt;/span>, number: &lt;span style="color:#fabd2f">u16&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> number &lt;span style="color:#fe8019">&amp;gt;&lt;/span> &lt;span style="color:#d3869b">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> print!(&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>&lt;span style="color:#b8bb26">{}&lt;/span>&lt;span style="color:#b8bb26"> &amp;#34;&lt;/span>, base &lt;span style="color:#fe8019">*&lt;/span> number);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> foo(base, number &lt;span style="color:#fe8019">-&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> foo(&lt;span style="color:#d3869b">3&lt;/span>, &lt;span style="color:#d3869b">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> print!(&lt;span style="color:#b8bb26">&amp;#34;1&lt;/span>&lt;span style="color:#b8bb26">\n&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>&lt;/table>
&lt;p>Since I was asked to include C in the benchmark, as it has been a standard for performance for almost half a century and it is something that every benchmark of a language attempting to surpass it should include, here is an example program in C:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>&lt;span style="color:#fabd2f">void&lt;/span> &lt;span style="color:#fabd2f">foo&lt;/span>(&lt;span style="color:#fabd2f">uint16_t&lt;/span> base, &lt;span style="color:#fabd2f">uint16_t&lt;/span> number) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> (number) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> &lt;span style="color:#fabd2f">printf&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;%u &amp;#34;&lt;/span>, base &lt;span style="color:#fe8019">*&lt;/span> number);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#fabd2f">foo&lt;/span>(base, number &lt;span style="color:#fe8019">-&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span> &lt;span style="color:#fabd2f">foo&lt;/span>(&lt;span style="color:#d3869b">3&lt;/span>, &lt;span style="color:#d3869b">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span> &lt;span style="color:#fabd2f">printf&lt;/span>(&lt;span style="color:#b8bb26">&amp;#34;1&lt;/span>&lt;span style="color:#b8bb26">\n&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="a-dive-deeper">A dive deeper&lt;/h2>
&lt;p>Let us now compare the final size of the produced binaries, as well as the time it took to assemble and run them. &lt;highlight>TLDR: If you wish to skip the lenghty blabberings and view the results as a graphic representation, scroll to the bottom of the page.&lt;/highlight>&lt;/p>
&lt;h3 id="wisnialang">WisniaLang&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./wisnia test.wsn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>real 0m0.004s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>user 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>sys 0m0.001s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>âââª ls -lh a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>-rwxrwxrwx &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas &lt;span style="color:#d3869b">528&lt;/span> Dec &lt;span style="color:#d3869b">27&lt;/span> 17:20 a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>real 0m0.004s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>user 0m0.000s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>sys 0m0.004s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>3.3 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>0.515 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>4.25 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="c">C&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> gcc test.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>real 0m0.040s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>user 0m0.025s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>sys 0m0.015s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>âââª ls -lh a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas 16K Dec &lt;span style="color:#d3869b">27&lt;/span> 12:39 a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>real 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>user 0m0.001s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>sys 0m0.001s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>38.05 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>16 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>1.6 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="c-optimized-for-size">C (optimized for size)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> gcc -Os -s test.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>real 0m0.045s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>user 0m0.028s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>sys 0m0.017s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>âââª ls -lh a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas 15K Dec &lt;span style="color:#d3869b">27&lt;/span> 12:41 a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>real 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>user 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>sys 0m0.000s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>42.15 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>15 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>1.7 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="c-optimized-for-speed">C (optimized for speed)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> gcc -O3 -s test.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>real 0m0.046s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>user 0m0.033s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>sys 0m0.012s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>âââª ls -lh a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas 15K Dec &lt;span style="color:#d3869b">27&lt;/span> 12:42 a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>real 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>user 0m0.000s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>sys 0m0.002s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>47.75 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>15 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>1.6 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="rust">Rust&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª rustc --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>rustc 1.65.0 &lt;span style="color:#fe8019">(&lt;/span>897e37553 2022-11-02&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> rustc test.rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>real 0m0.167s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>user 0m0.131s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>sys 0m0.042s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>âââª ls -lh &lt;span style="color:#fabd2f">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas 3.9M Dec &lt;span style="color:#d3869b">27&lt;/span> 15:26 &lt;span style="color:#fabd2f">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>âââª strip &lt;span style="color:#fabd2f">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span>âââª ls -lh &lt;span style="color:#fabd2f">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">20&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">1&lt;/span> tautvydas tautvydas 319K Dec &lt;span style="color:#d3869b">27&lt;/span> 15:26 &lt;span style="color:#fabd2f">test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">21&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">22&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">23&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">24&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">25&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">26&lt;/span>&lt;span>real 0m0.003s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">27&lt;/span>&lt;span>user 0m0.000s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">28&lt;/span>&lt;span>sys 0m0.003s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At first, Rust took &lt;code>167 ms&lt;/code> to compile the program, which weighted &lt;code>3.9 MiB&lt;/code>. After removing debug symbols from the binary, the binary now weighs &lt;code>319 KiB&lt;/code>, putting it considerably behind WisniaLang.&lt;/p>
&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>156.2 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>319 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>2.15 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="rust-optimized-for-size--libc">Rust (optimized for size + libc)&lt;/h3>
&lt;p>This would necessitate a revision of the previously mentioned sample program to utilize &lt;code>libc&lt;/code> rather than the standard library (&lt;code>std::*&lt;/code>). The &lt;code>Cargo.toml&lt;/code> file is provided below, along with a revised example program.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>[package]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>name = &amp;#34;optimized-size&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>version = &amp;#34;0.1.0&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>[profile.release]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>panic = &amp;#34;abort&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>lto = true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>strip = true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>codegen-units = 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>incremental = false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>opt-level = &amp;#34;z&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>[dependencies]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>libc = { version = &amp;#34;0.2&amp;#34;, default-features = false }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#![no_std]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#![no_main]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>&lt;span style="color:#fe8019">extern&lt;/span> &lt;span style="color:#fe8019">crate&lt;/span> libc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>&lt;span style="color:#fe8019">use&lt;/span> libc::c_uint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">foo&lt;/span>(base: &lt;span style="color:#fabd2f">u16&lt;/span>, number: &lt;span style="color:#fabd2f">u16&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> number &lt;span style="color:#fe8019">&amp;gt;&lt;/span> &lt;span style="color:#d3869b">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> &lt;span style="color:#fe8019">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> libc::printf(&lt;span style="color:#b8bb26">&amp;#34;%u &lt;/span>&lt;span style="color:#b8bb26">\0&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>.as_ptr() &lt;span style="color:#fe8019">as&lt;/span> &lt;span style="color:#fe8019">*&lt;/span>&lt;span style="color:#fe8019">const&lt;/span> libc::c_char, (base &lt;span style="color:#fe8019">*&lt;/span> number) &lt;span style="color:#fe8019">as&lt;/span> c_uint);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span> foo(base, number &lt;span style="color:#fe8019">-&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#[no_mangle]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>&lt;span style="color:#fe8019">pub&lt;/span> &lt;span style="color:#fe8019">extern&lt;/span> &lt;span style="color:#b8bb26">&amp;#34;C&amp;#34;&lt;/span> &lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span> &lt;span style="color:#fe8019">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span> foo(&lt;span style="color:#d3869b">3&lt;/span>, &lt;span style="color:#d3869b">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">20&lt;/span>&lt;span> libc::printf(&lt;span style="color:#b8bb26">&amp;#34;1&lt;/span>&lt;span style="color:#b8bb26">\n&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>.as_ptr() &lt;span style="color:#fe8019">as&lt;/span> &lt;span style="color:#fe8019">*&lt;/span>&lt;span style="color:#fe8019">const&lt;/span> libc::c_char);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">21&lt;/span>&lt;span> libc::exit(&lt;span style="color:#d3869b">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">22&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">23&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">24&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">25&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#[panic_handler]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">26&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">my_panic&lt;/span>(_info: &lt;span style="color:#fe8019">&amp;amp;&lt;/span>core::panic::PanicInfo) -&amp;gt; &lt;span style="color:#fe8019">!&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">27&lt;/span>&lt;span> &lt;span style="color:#fe8019">loop&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">28&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s see how well it performs now, excluding the time it took to compile &lt;code>libc&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-size&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> cargo build --release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> Compiling optimized-size v0.1.0 &lt;span style="color:#fe8019">(&lt;/span>~/tests/rust-optim-size&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> Finished release &lt;span style="color:#fe8019">[&lt;/span>optimized&lt;span style="color:#fe8019">]&lt;/span> target&lt;span style="color:#fe8019">(&lt;/span>s&lt;span style="color:#fe8019">)&lt;/span> in 0.17s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>real 0m0.222s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>user 0m0.188s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>sys 0m0.034s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-size&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>âââª ls -lh target/release/optimized-size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">2&lt;/span> tautvydas tautvydas 14K Dec &lt;span style="color:#d3869b">27&lt;/span> 15:27 target/release/optimized-size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-size&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./target/release/optimized-size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span>real 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span>user 0m0.000s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">20&lt;/span>&lt;span>sys 0m0.002s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>225.6 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>14 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>1.75 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="rust-optimized-for-speed--libc">Rust (optimized for speed + libc)&lt;/h3>
&lt;p>Same &lt;code>Cargo.toml&lt;/code> file as before, but with &lt;code>opt-level&lt;/code> set to &lt;code>3&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-speed&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> cargo build --release
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> Compiling optimized-speed v0.1.0 &lt;span style="color:#fe8019">(&lt;/span>~/tests/rust-optim-speed&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> Finished release &lt;span style="color:#fe8019">[&lt;/span>optimized&lt;span style="color:#fe8019">]&lt;/span> target&lt;span style="color:#fe8019">(&lt;/span>s&lt;span style="color:#fe8019">)&lt;/span> in 0.17s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>real 0m0.226s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>user 0m0.187s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>sys 0m0.039
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-speed&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>âââª ls -lh target/release/optimized-speed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>-rwxr-xr-x &lt;span style="color:#d3869b">2&lt;/span> tautvydas tautvydas 14K Dec &lt;span style="color:#d3869b">27&lt;/span> 15:28 target/release/optimized-speed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>ââ&lt;span style="color:#fe8019">[&lt;/span>tautvydas&lt;span style="color:#fe8019">][&lt;/span>kagamin&lt;span style="color:#fe8019">][&lt;/span>~/tests/rust-optim-speed&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>âââª &lt;span style="color:#fabd2f">time&lt;/span> ./target/release/optimized-speed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>&lt;span style="color:#d3869b">3000&lt;/span> &lt;span style="color:#d3869b">2997&lt;/span> &lt;span style="color:#d3869b">2994&lt;/span> &lt;span style="color:#d3869b">2991&lt;/span> &lt;span style="color:#fe8019">(&lt;/span>omitted by the author&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span>real 0m0.002s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span>user 0m0.000s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">20&lt;/span>&lt;span>sys 0m0.002s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running 20 times, the results averaged out to:&lt;/p>
&lt;ul>
&lt;li>Compilation time: &lt;code>235.5 ms&lt;/code>&lt;/li>
&lt;li>Size of the binary: &lt;code>14 KiB&lt;/code>&lt;/li>
&lt;li>Runtime speed: &lt;code>1.55 ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="results">Results&lt;/h2>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/benchmark-results.png" alt="wisnialang-vs-rust">&lt;/p>
&lt;p>WisniaLang excels in the first two benchmark categories (compilation time and produced binary size), but falls short in the third category (speed of the binary), which remains an area for improvement.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>If compilation speed and binary size are important, dropping the LLVM toolchain can have a positive impact&lt;/li>
&lt;li>However, doing so means missing out on LLVM optimizations as well as support for arbitrary OSes and architectures&lt;/li>
&lt;/ul></description></item><item><title>Outperforming Rayon with OpenMP</title><link>https://belijzajac.dev/outperforming-rayon-with-openmp/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/outperforming-rayon-with-openmp/</guid><description>&lt;p>&lt;img src="https://belijzajac.dev/post-images/rip-craberino.jpg" alt="rip-craberino">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>For the Blockchain Technologies course, students were paired into groups and assigned to produce the fastest Rust library (crate) implementing the KZG10 scheme. Two teams used the same backend, that is, &lt;highlight>&lt;a href="https://github.com/supranational/blst">blst&lt;/a>&lt;/highlight> (implemented in assembly with direct bindings for Rust and C). The first team, &lt;highlight>&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/blst">blst-from-scratch&lt;/a>&lt;/highlight>, was using the said Rust bindings to produce an interface closer to &lt;highlight>&lt;a href="https://github.com/benjaminion/c-kzg">c-kzg&lt;/a>&lt;/highlight>, whereas the &lt;highlight>&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/ckzg">ckzg&lt;/a>&lt;/highlight> team, which I was part of, was responsible for porting the latter over to Rust.&lt;/p>
&lt;h2 id="choosing-the-right-tool-for-the-job">Choosing the right tool for the job&lt;/h2>
&lt;p>It&amp;rsquo;s kind of obvious for Rust programmers to pick &lt;code>Rayon&lt;/code> out of the box because there aren&amp;rsquo;t any other viable options for writing parallel code, except for &lt;code>std::thread&lt;/code>s, but who wants to manually create and manage threads when simpler solutions exist, anyway? I had to make a decision on which technique to go by:&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>pthread&lt;/code>s manually&lt;/li>
&lt;li>Some random guy&amp;rsquo;s threadpool library from GitHub with the most stars&lt;/li>
&lt;li>&lt;code>OpenMP&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>I picked &lt;code>OpenMP&lt;/code> because, while experimenting, I found it to produce the best results, and it was a no-brainer to use except for coming up with how to seemingly integrate it with Rust so that it would work on multiple platforms. In the end, I came up with a simple Bash script to automate the whole building and packaging of shared libraries, and, luckily enough, OpenMP was easily integrated into Rust by either:&lt;/p>
&lt;ul>
&lt;li>exporting the &lt;code>RUSTFLAGS&lt;/code> environment variable pointing to the correct &lt;code>libomp&lt;/code> LLVM runtime&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>apt install libomp-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> LIBOMP_PATH&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">$(&lt;/span>find /usr/lib/llvm* -name libiomp5.so | head -n 1&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># MacOS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>brew install libomp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ln -s /usr/local/opt/libomp/lib/libomp.dylib /usr/local/lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>ln -s /usr/local/opt/libomp/include/omp.h /usr/local/include
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> LIBOMP_PATH&lt;span style="color:#fe8019">=&lt;/span>/usr/local/lib/libomp.dylib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># And finally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> RUSTFLAGS&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;-C link-arg=&lt;/span>$LIBOMP_PATH&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>or creating a &lt;code>.cargo/config.toml&lt;/code> file inside the project directory and mentioning it there&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>[build]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>rustflags = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> &amp;#34;-C&amp;#34;, &amp;#34;link-arg=PATH_TO_LIBOMP_SO_OR_DYLIB&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple!&lt;/p>
&lt;h2 id="searching-for-bottlenecks">Searching for bottlenecks&lt;/h2>
&lt;p>The general procedure for looking for what to parallelize is to use CPU profiling tools such as &lt;code>Perf&lt;/code> that produce flamegraphs, which are a really nice visual way to represent the CPU time of a program. Below is the flamegraph that was generated by running the c-kzg&amp;rsquo;s &lt;code>fft_g1&lt;/code> benchmark:&lt;/p>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/flame-graphu.svg" alt="flamegraph-of-fft-g1">&lt;/p>
&lt;p>which, as I&amp;rsquo;ve noticed, had a huge impact on performance with the majority of calls tracing down to assembly code; a similar kzg implementation library called &lt;highlight>&lt;a href="https://github.com/protolambda/go-kzg">go-kzg&lt;/a>&lt;/highlight> that was taken as a reference a few times while producing unit tests and benchmarks, showed that their &lt;code>fft_g1&lt;/code> benchmark took the longest time to execute as well, among others.&lt;/p>
&lt;p>So, we have 7 groups of benchmarks:&lt;/p>
&lt;ul>
&lt;li>das&lt;/li>
&lt;li>fft&lt;/li>
&lt;li>fk20&lt;/li>
&lt;li>kzg&lt;/li>
&lt;li>poly&lt;/li>
&lt;li>recover&lt;/li>
&lt;li>zero_poly&lt;/li>
&lt;/ul>
&lt;p>of which let&amp;rsquo;s pick &lt;code>fft_g1&lt;/code> from the &lt;code>fft&lt;/code> group to parallelize out!&lt;/p>
&lt;h2 id="parallelizing-fft_g1">Parallelizing fft_g1&lt;/h2>
&lt;p>The &lt;code>fft_g1&lt;/code> function in all cases calls the &lt;code>fft_g1_fast&lt;/code> function, which applies the &lt;em>divide-and-conquer&lt;/em> principle to divide a large problem into smaller subproblems, recursively solving each of them. The general procedure here is to distribute work (&lt;code>fft_f1_fast&lt;/code>s) among worker threads.&lt;/p>
&lt;p>The blst-from-scratch team implemented it as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">let&lt;/span> (lo, hi) &lt;span style="color:#fe8019">=&lt;/span> ret.split_at_mut(half);
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>rayon::join(
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">||&lt;/span> fft_g1_fast(lo, data, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fe8019">||&lt;/span> fft_g1_fast(hi, &lt;span style="color:#fe8019">&amp;amp;&lt;/span>data[stride&lt;span style="color:#fe8019">..&lt;/span>], stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>&lt;span style="color:#fe8019">for&lt;/span> i &lt;span style="color:#fe8019">in&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>&lt;span style="color:#fe8019">..&lt;/span>half {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> y_times_root &lt;span style="color:#fe8019">=&lt;/span> ret[i &lt;span style="color:#fe8019">+&lt;/span> half].mul(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>roots[i &lt;span style="color:#fe8019">*&lt;/span> roots_stride]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> ret[i &lt;span style="color:#fe8019">+&lt;/span> half] &lt;span style="color:#fe8019">=&lt;/span> ret[i].sub(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> ret[i] &lt;span style="color:#fe8019">=&lt;/span> ret[i].add_or_dbl(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a side note, &lt;code>rayon::join&lt;/code> spawns two threads, one executing each of the two closures.&lt;/p>
&lt;p>The C equivalent, on the other hand, was as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp parallel sections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#8ec07c">#pragma omp section
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fabd2f">fft_g1_fast&lt;/span>(out, in, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, half);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#8ec07c">#pragma omp section
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> &lt;span style="color:#fabd2f">fft_g1_fast&lt;/span>(out &lt;span style="color:#fe8019">+&lt;/span> half, in &lt;span style="color:#fe8019">+&lt;/span> stride, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, half);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp parallel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>&lt;span style="color:#fe8019">for&lt;/span> (&lt;span style="color:#fabd2f">uint64_t&lt;/span> i &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>; i &lt;span style="color:#fe8019">&amp;lt;&lt;/span> half; i&lt;span style="color:#fe8019">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_t&lt;/span> y_times_root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_mul&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root, &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i &lt;span style="color:#fe8019">+&lt;/span> half], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>roots[i &lt;span style="color:#fe8019">*&lt;/span> roots_stride]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_sub&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i &lt;span style="color:#fe8019">+&lt;/span> half], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_add_or_dbl&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to parallel sections, I also utilized OpenMP&amp;rsquo;s parallel for-loop, because I noticed it yielded a &lt;strong>5% greater performance&lt;/strong> on my personal machine. Considering the &lt;code>ubuntu-latest&lt;/code> runner in GitHub Actions CI had only two available threads, the halves of the problem were shared among those two threads where each ran the for-loop to do arithmetic operations on polynomial &lt;code>G1&lt;/code> points.&lt;/p>
&lt;p>In the above code snippets, &lt;code>fft_g1&lt;/code> calls &lt;code>fft_g1_fast&lt;/code>, which up to scale 16 should at most &lt;code>1 &amp;lt;&amp;lt; 15&lt;/code> times recursively call itself, where each such call will be distributed among the 2 threads. Since we&amp;rsquo;re computing &lt;code>fft_g1&lt;/code> up to scale 8, there should be &lt;code>(1 &amp;lt;&amp;lt; 7) + 1&lt;/code> tasks (not to be confused by OpenMP&amp;rsquo;s &lt;code>task&lt;/code> pragma directive!) for &lt;code>fft_g1_fast&lt;/code> or &lt;code>129&lt;/code> such tasks that will be run in parallel!&lt;/p>
&lt;h2 id="local-c-kzg-benchmark">Local c-kzg benchmark&lt;/h2>
&lt;p>Running on my personal laptop with i5-7300HQ (4 threads overclocked @ 3.50GHz), all mitigations turned off, and a custom Liquorix kernel, I was able to produce the following results:&lt;/p>
&lt;table>
&lt;tr>&lt;th>Original c-kzg library&lt;/th>&lt;th>Parallelized c-kzg library&lt;/th>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>$ ./fft_g1_bench
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>*** Benchmarking FFT_g1, &lt;span style="color:#d3869b">1&lt;/span> second per test.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>fft_g1/scale_4 &lt;span style="color:#d3869b">1729769&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>fft_g1/scale_5 &lt;span style="color:#d3869b">4935085&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>fft_g1/scale_6 &lt;span style="color:#d3869b">12897731&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>fft_g1/scale_7 &lt;span style="color:#d3869b">32022026&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>fft_g1/scale_8 &lt;span style="color:#d3869b">76552852&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>fft_g1/scale_9 &lt;span style="color:#d3869b">184970057&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>fft_g1/scale_10 &lt;span style="color:#d3869b">418273808&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>fft_g1/scale_11 &lt;span style="color:#d3869b">919499032&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>fft_g1/scale_12 &lt;span style="color:#d3869b">2025633037&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>fft_g1/scale_13 &lt;span style="color:#d3869b">4479830518&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>fft_g1/scale_14 &lt;span style="color:#d3869b">9754557496&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>fft_g1/scale_15 &lt;span style="color:#d3869b">21125613058&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>$ OMP_NUM_THREADS&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">4&lt;/span> ./fft_g1_bench
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>*** Benchmarking FFT_g1, &lt;span style="color:#d3869b">1&lt;/span> second per test.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>fft_g1/scale_4 &lt;span style="color:#d3869b">839454&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>fft_g1/scale_5 &lt;span style="color:#d3869b">2378457&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>fft_g1/scale_6 &lt;span style="color:#d3869b">6404191&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>fft_g1/scale_7 &lt;span style="color:#d3869b">16325966&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>fft_g1/scale_8 &lt;span style="color:#d3869b">38141754&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>fft_g1/scale_9 &lt;span style="color:#d3869b">90948810&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>fft_g1/scale_10 &lt;span style="color:#d3869b">204757690&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>fft_g1/scale_11 &lt;span style="color:#d3869b">457509973&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>fft_g1/scale_12 &lt;span style="color:#d3869b">1006089135&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>fft_g1/scale_13 &lt;span style="color:#d3869b">2240095284&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>fft_g1/scale_14 &lt;span style="color:#d3869b">4879448286&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>fft_g1/scale_15 &lt;span style="color:#d3869b">10650876381&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>&lt;/table>
&lt;p>That&amp;rsquo;s &lt;strong>twice as fast&lt;/strong> with as little effort as putting in a few pragmas!&lt;/p>
&lt;h2 id="github-actions-ci-benchmarks">GitHub Actions CI benchmarks&lt;/h2>
&lt;p>The &lt;code>fft_g1&lt;/code> benchmark was limited to scale 7 because the overall run time for the job exceeds the 6 hour limit if I were to benchmark it up to scale 16, as Criterion runs each iteration a couple of hundred times to produce more accurate results, and that used to automatically cancel other running tasks as jobs submitted to GitHub Actions have a limit of 360 minutes.&lt;/p>
&lt;h3 id="benchmarking-blst-from-scratch">Benchmarking blst-from-scratch&lt;/h3>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/from-scratch-github-actions.png" alt="from-scratch-github-actions">&lt;/p>
&lt;p>From the above screenshot we can see that the parallelized version of the produced library ran &lt;code>1m 28s&lt;/code> shorter than its sequential version, and below are the results of sequential &lt;code>fft_g1&lt;/code> algorithm:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.6364 s (200 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [33.423 ms 33.785 ms 34.150 ms]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>of which the average run time for scale 7 was cut down by &lt;code>38.926%&lt;/code> by its parallel counterpart:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.3282 s (300 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [20.432 ms 20.634 ms 20.843 ms]
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6&lt;/span>&lt;span> change: [-39.822% -38.926% -38.001%] (p = 0.00 &amp;lt; 0.05)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7&lt;/span>&lt;span> Performance has improved.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="benchmarking-ckzg">Benchmarking ckzg&lt;/h3>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/ckzg-github-actions.png" alt="ckzg-github-actions">&lt;/p>
&lt;p>The sequential version of the ckzg library ran &lt;code>2m 7s&lt;/code> faster than the same version of blst-from-scratch because it had other benchmarks that performed faster, though the parallelized version ran &lt;code>1m 2s&lt;/code> faster than its sequential version. Below are the results of the sequantial &lt;code>fft_g1&lt;/code> algorithm:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.8313 s (200 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [32.194 ms 32.471 ms 32.760 ms]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yet the parallel version of the &lt;code>fft_g1&lt;/code> algorithm performed much faster than it did for blst-from-scratch, even though both unparallelized versions for both teams performed evenly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 5.0701 s (300 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [16.854 ms 17.107 ms 17.439 ms]
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6&lt;/span>&lt;span> change: [-48.216% -47.318% -46.306%] (p = 0.00 &amp;lt; 0.05)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7&lt;/span>&lt;span> Performance has improved.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To cut a long story short, ckzg outperformed blst-from-scratch in all of the 7 benchmark groups.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>OpenMP lets you quickly propotype what is feasible to parallelize with the help of CPU profiling tools such as Perf&lt;/li>
&lt;li>Criterion is actually a really nice benchmarking tool to measure performance, especially when integrated into CI&lt;/li>
&lt;li>ckzg has surpassed blst-from-scratch in becoming the fastest Rust library (yet) for kzg10 commitments&lt;/li>
&lt;/ul></description></item></channel></rss>