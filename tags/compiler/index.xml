<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiler on belijzajac.dev</title><link>https://belijzajac.dev/tags/compiler/</link><description>Recent content in Compiler on belijzajac.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@belijzajac.dev (belijzajac)</managingEditor><webMaster>blog@belijzajac.dev (belijzajac)</webMaster><copyright>Copyright © 2024 | CC BY-NC-SA 4.0</copyright><lastBuildDate>Mon, 17 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://belijzajac.dev/tags/compiler/index.xml" rel="self" type="application/rss+xml"/><item><title>WisniaLang: Compiler Project</title><link>https://belijzajac.dev/wisnialang-compiler-project/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/wisnialang-compiler-project/</guid><description>&lt;p>&lt;img src="https://belijzajac.dev/post-images/dragon-maid-compiler-book.jpg" alt="dragon-book">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>For the past 3 years, I have been working on the &lt;highlight>&lt;a href="https://github.com/belijzajac/WisniaLang">WisniaLang&lt;/a>&lt;/highlight> compiler for my own programming language that compiles to native machine code and packs it into an executable by itself. Unlike many others, I rolled out my own compiler backend from scratch that does fast but naive code generation. While it&amp;rsquo;s admittedly a more old-fashioned approach to compiler engineering, it&amp;rsquo;s the path I chose to take when developing my compiler.&lt;/p>
&lt;p>Many in the field rely on LLVM Intermediate Representation (IR) for their compilers, which can feel somewhat like cheating. Essentially, they’re just tapping into LLVM’s optimizations and claiming ownership of the result. Then they compare their LLVM-based language #5646545 to another LLVM-based language #5646698, touting superior benchmark results, all while benefiting from LLVM’s optimizations. Truly, the LLVM project has a lot of man hours poured into optimizations. Interestingly, I have heard that even established compilers like those for Fortran are switching over to LLVM, following the trend.&lt;/p>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/wisnialang-architecture.png" alt="architecture">&lt;/p>
&lt;p>My compiler&amp;rsquo;s architecture is divided into several main phases that work together to complete this translation. These phases include lexical analysis, which breaks the source code down into smaller pieces called tokens; syntactic analysis, which builds a representation of the structure of the source code called an abstract syntax tree (AST); semantic analysis, which checks the AST for semantic errors while traversing the tree; intermediate representation (IR), which represents the code in a lower-level form close to the target architecture; code generation, which allocates registers and generates machine code from the said IRs; and, lastly, packing the resulting machine code into an executable program in ELF format.&lt;/p>
&lt;h2 id="programming-languages-and-llvm">Programming languages and LLVM&lt;/h2>
&lt;p>Before going further, let me get straight to the point:&lt;/p>
&lt;ol>
&lt;li>Writing compilers is easy&lt;/li>
&lt;li>Optimizing the machine code is hard&lt;/li>
&lt;li>Supporting arbitrary architectures / operating systems is hard&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/llvm-approach.png" alt="llvm-approach">&lt;/p>
&lt;p>This is where LLVM comes in handy. LLVM uses an intermediate representation language, which is kind of similar to assembly, but with a few higher level constructs. LLVM is good at optimizing this IR language, as well as compiling into different architecture and binary formats. So as a language author using LLVM, I&amp;rsquo;m really writing a transpiler from my language to LLVM IR, and letting the LLVM compiler do the hard work.&lt;/p>
&lt;hr>
&lt;p>You talk about LLVM so much, why&amp;rsquo;s that? Let me begin with this illustration:&lt;/p>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/llvm-family.png" alt="llvm-family">&lt;/p>
&lt;p>I&amp;rsquo;m not sure if it&amp;rsquo;s a positive thing, but the LLVM project has achieved such widespread adoption that it&amp;rsquo;s almost reached a monopoly status, much like the Chromium project, for instance. Apart from Google Chrome, numerous other browsers are built upon the Chromium codebase. From Electron web apps to Arc, Microsoft Edge, Opera, Vivaldi, Brave, and beyond, the list just goes on. Firefox and Safari are perhaps the only web browsers that stand out from this copy-paste crowd.&lt;/p>
&lt;p>I just wanted to point out that while 99.9% of compiler developers opt for LLVM, the remaining few explore alternative compiler backends like &lt;highlight>&lt;a href="https://c9x.me/compile/">QBE&lt;/a>&lt;/highlight>, develop interpreters (like Python), or create virtual machines (such as the JVM for Java and Kotlin). Some even write transpilers that convert high-level languages into something low-level like C, which is then compiled with gcc. If you recall the dragon compiler book appearing at the top of this page, these and similar compiler books are gradually losing relevance because they don&amp;rsquo;t teach how to use LLVM, the industry&amp;rsquo;s compiler standard.&lt;/p>
&lt;h2 id="performing-benchmarks">Performing benchmarks&lt;/h2>
&lt;p>To benchmark different compilers, I chose the Fibonacci sequence without recursion problem and computed the 46th Fibonacci number with each compiler under test. This number was chosen because it conveniently fits within 32 bits. Compile-time and runtime benchmarks were performed using the &lt;highlight>&lt;a href="https://github.com/sharkdp/hyperfine">hyperfine&lt;/a>&lt;/highlight> command-line benchmarking tool, which closely resembles Rust&amp;rsquo;s &lt;highlight>&lt;a href="https://github.com/bheisler/criterion.rs">Criterion&lt;/a>&lt;/highlight> benchmarking library. Binary size benchmarks were carried out using standard Linux tools like &lt;code>strip&lt;/code> to remove debug symbols from binaries and &lt;code>wc&lt;/code> to display byte counts for each binary file.&lt;/p>
&lt;h3 id="wisnialang-benchmark">WisniaLang benchmark&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">fibonacci&lt;/span>(n: int) -&amp;gt; int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> (n &lt;span style="color:#fe8019">&amp;lt;=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> int prev &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> int current &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#fe8019">for&lt;/span> (int i &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>; i &lt;span style="color:#fe8019">&amp;lt;=&lt;/span> n; i &lt;span style="color:#fe8019">=&lt;/span> i &lt;span style="color:#fe8019">+&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> int next &lt;span style="color:#fe8019">=&lt;/span> prev &lt;span style="color:#fe8019">+&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> prev &lt;span style="color:#fe8019">=&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> current &lt;span style="color:#fe8019">=&lt;/span> next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span> print(fibonacci(&lt;span style="color:#d3869b">46&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Compile time&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">1000&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;./wisnia fibonacci.wsn&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: ./wisnia fibonacci.wsn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 3.8 ms ± 0.3 ms &lt;span style="color:#fe8019">[&lt;/span>User: 3.0 ms, System: 0.6 ms&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 3.4 ms … 6.5 ms &lt;span style="color:#d3869b">1000&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Runtime&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">1000&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;./a.out&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 109.6 µs ± 36.8 µs &lt;span style="color:#fe8019">[&lt;/span>User: 58.2 µs, System: 4.7 µs&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 84.0 µs … 736.3 µs &lt;span style="color:#d3869b">1000&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Binary size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>wc -c a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#d3869b">421&lt;/span> a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c-gcc-benchmark">C++ (gcc) benchmark&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#fe8019">constexpr&lt;/span> &lt;span style="color:#fe8019">auto&lt;/span> &lt;span style="color:#fabd2f">fibonacci&lt;/span>(u_int32_t n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> (n &lt;span style="color:#fe8019">&amp;lt;=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> u_int32_t prev &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>, current &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> &lt;span style="color:#fe8019">for&lt;/span> (size_t i &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>; i &lt;span style="color:#fe8019">&amp;lt;=&lt;/span> n; i&lt;span style="color:#fe8019">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> u_int32_t next &lt;span style="color:#fe8019">=&lt;/span> prev &lt;span style="color:#fe8019">+&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> prev &lt;span style="color:#fe8019">=&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> current &lt;span style="color:#fe8019">=&lt;/span> next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span> std&lt;span style="color:#fe8019">::&lt;/span>printf(&lt;span style="color:#b8bb26">&amp;#34;%d&amp;#34;&lt;/span>, fibonacci(&lt;span style="color:#d3869b">46&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Compile time&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">100&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;gcc -std=c++23 -O3 fibonacci.cpp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: gcc -std&lt;span style="color:#fe8019">=&lt;/span>c++23 -O3 fibonacci.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 456.4 ms ± 4.5 ms &lt;span style="color:#fe8019">[&lt;/span>User: 415.8 ms, System: 35.2 ms&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 448.9 ms … 472.1 ms &lt;span style="color:#d3869b">100&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Runtime&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">1000&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;./a.out&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 347.1 µs ± 62.8 µs &lt;span style="color:#fe8019">[&lt;/span>User: 206.4 µs, System: 67.2 µs&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 271.9 µs … 926.4 µs &lt;span style="color:#d3869b">1000&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Binary size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>strip a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>wc -c a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>&lt;span style="color:#d3869b">14472&lt;/span> a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c-clang-benchmark">C++ (clang) benchmark&lt;/h3>
&lt;p>Same program as before, just different compiler.&lt;/p>
&lt;h4>Compile time&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">100&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;clang -std=c++2b -O3 fibonacci.cpp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: clang -std&lt;span style="color:#fe8019">=&lt;/span>c++2b -O3 fibonacci.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 538.2 ms ± 16.9 ms &lt;span style="color:#fe8019">[&lt;/span>User: 481.7 ms, System: 45.7 ms&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 524.3 ms … 657.9 ms &lt;span style="color:#d3869b">100&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Runtime&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">1000&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;./a.out&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 351.4 µs ± 67.7 µs &lt;span style="color:#fe8019">[&lt;/span>User: 203.2 µs, System: 72.2 µs&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 267.1 µs … 984.8 µs &lt;span style="color:#d3869b">1000&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Binary size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>strip a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>wc -c a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>&lt;span style="color:#d3869b">14504&lt;/span> a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rust-benchmark">Rust benchmark&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">fibonacci&lt;/span>(n: &lt;span style="color:#fabd2f">u32&lt;/span>) -&amp;gt; &lt;span style="color:#fabd2f">u32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span> &lt;span style="color:#fe8019">if&lt;/span> n &lt;span style="color:#fe8019">&amp;lt;=&lt;/span> &lt;span style="color:#d3869b">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> (&lt;span style="color:#fe8019">mut&lt;/span> prev, &lt;span style="color:#fe8019">mut&lt;/span> current) &lt;span style="color:#fe8019">=&lt;/span> (&lt;span style="color:#d3869b">0&lt;/span>, &lt;span style="color:#d3869b">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> &lt;span style="color:#fe8019">for&lt;/span> _ &lt;span style="color:#fe8019">in&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>&lt;span style="color:#fe8019">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> next &lt;span style="color:#fe8019">=&lt;/span> prev &lt;span style="color:#fe8019">+&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> prev &lt;span style="color:#fe8019">=&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> current &lt;span style="color:#fe8019">=&lt;/span> next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> current
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>&lt;span style="color:#fe8019">fn&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span> println!(&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>&lt;span style="color:#b8bb26">{}&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>, fibonacci(&lt;span style="color:#d3869b">46&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Compile time&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">100&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;rustc -C opt-level=3 fibonacci.rs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: rustc -C opt-level&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">3&lt;/span> fibonacci.rs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 173.4 ms ± 3.0 ms &lt;span style="color:#fe8019">[&lt;/span>User: 130.5 ms, System: 51.2 ms&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 168.6 ms … 183.8 ms &lt;span style="color:#d3869b">100&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Runtime&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>hyperfine --runs &lt;span style="color:#d3869b">1000&lt;/span> --warmup &lt;span style="color:#d3869b">10&lt;/span> --shell&lt;span style="color:#fe8019">=&lt;/span>none &lt;span style="color:#b8bb26">&amp;#39;./fibonacci&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmark 1: ./fibonacci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> Time &lt;span style="color:#fe8019">(&lt;/span>mean ± σ&lt;span style="color:#fe8019">)&lt;/span>: 490.4 µs ± 82.8 µs &lt;span style="color:#fe8019">[&lt;/span>User: 264.9 µs, System: 129.3 µs&lt;span style="color:#fe8019">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span> Range &lt;span style="color:#fe8019">(&lt;/span>min … max&lt;span style="color:#fe8019">)&lt;/span>: 375.1 µs … 1092.6 µs &lt;span style="color:#d3869b">1000&lt;/span> runs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4>Binary size&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>strip fibonacci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>wc -c fibonacci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>&lt;span style="color:#d3869b">321920&lt;/span> fibonacci
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="results">Results&lt;/h2>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/benchmark-results.png" alt="wisnialang-vs-rust">&lt;/p>
&lt;p>Combining mean compile time, runtime, and binary sizes from benchmark results, we obtain the following graph. To be honest, I&amp;rsquo;m quite impressed by my compiler&amp;rsquo;s generated binary&amp;rsquo;s runtime performance. However, it&amp;rsquo;s important to acknowledge that the runtime range for WisniaLang was &lt;code>84.0 µs&lt;/code> to &lt;code>736.3 µs&lt;/code> over 1000 program runs, indicating ambiguous results due to benchmarking a program of less than 20 lines of code. In the real world, to accurately assess a compiler backend&amp;rsquo;s performance, one would need to run benchmarks on millions of lines of code.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>If compilation speed and binary size are important, dropping the LLVM toolchain can have a positive impact&lt;/li>
&lt;li>However, doing so means missing out on LLVM optimizations as well as support for arbitrary OSes and architectures&lt;/li>
&lt;/ul></description></item></channel></rss>