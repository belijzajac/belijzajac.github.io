<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on belijzajac.dev</title><link>https://belijzajac.dev/tags/c/</link><description>Recent content in C on belijzajac.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@belijzajac.dev (belijzajac)</managingEditor><webMaster>blog@belijzajac.dev (belijzajac)</webMaster><copyright>Copyright Â© 2024 | CC BY-NC-SA 4.0</copyright><lastBuildDate>Tue, 16 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://belijzajac.dev/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Outperforming Rayon with OpenMP</title><link>https://belijzajac.dev/outperforming-rayon-with-openmp/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/outperforming-rayon-with-openmp/</guid><description>&lt;p>&lt;img src="https://belijzajac.dev/post-images/rip-craberino.jpg" alt="rip-craberino">&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>For the Blockchain Technologies course, students were paired into groups and assigned to produce the fastest Rust library implementing the KZG10 cryptographic scheme. Two teams used the &lt;highlight>&lt;a href="https://github.com/supranational/blst">blst&lt;/a>&lt;/highlight> backend, which is implemented in assembly and has direct bindings for Rust and C. The first team, &lt;highlight>&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/blst">blst-from-scratch&lt;/a>&lt;/highlight>, used the Rust bindings provided by the blst library to produce an interface closer to &lt;highlight>&lt;a href="https://github.com/benjaminion/c-kzg">c-kzg&lt;/a>&lt;/highlight>. The second team, which I was part of, worked on the &lt;highlight>&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/ckzg">ckzg&lt;/a>&lt;/highlight> library in C. We were responsible for producing an implementation that could integrate into Rust via the C bindings provided by my team.&lt;/p>
&lt;h2 id="choosing-the-right-tool-for-the-job">Choosing the right tool for the job&lt;/h2>
&lt;p>It&amp;rsquo;s a no-brainer for Rust programmers to choose &lt;code>Rayon&lt;/code> when it comes to writing parallel code, as there aren&amp;rsquo;t many other viable and easy-to-use options available. While Rust does offer alternatives like &lt;code>std::thread&lt;/code>, which provides access to native OS threads, the manual creation and management of threads can be cumbersome.&lt;/p>
&lt;p>When I was working on my C code, I had to decide on the best approach to parallelize it. My options included:&lt;/p>
&lt;ul>
&lt;li>&lt;code>pthread&lt;/code>: A POSIX standard for thread creation and management.&lt;/li>
&lt;li>A popular third-party threadpool library from GitHub.&lt;/li>
&lt;li>&lt;code>OpenMP&lt;/code>: Parallel programming library for C and C++ without manual thread management.&lt;/li>
&lt;/ul>
&lt;p>I chose OpenMP because, during experimentation, I discovered it yielded the best results and was relatively straightforward to use. However, I encountered a challenge in integrating it with Rust to ensure compatibility across multiple platforms, starting with Linux and possibly macOS. Eventually, I came up with the following Bash script to automate the entire process of building and packaging shared libraries. Fortunately, OpenMP was integrated into Rust by either:&lt;/p>
&lt;ul>
&lt;li>exporting the &lt;code>RUSTFLAGS&lt;/code> environment variable pointing to the correct &lt;code>libomp&lt;/code> LLVM runtime&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># Linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>apt install libomp-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> LIBOMP_PATH&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#fe8019">$(&lt;/span>find /usr/lib/llvm* -name libiomp5.so | head -n 1&lt;span style="color:#fe8019">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># MacOS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>brew install libomp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>ln -s /usr/local/opt/libomp/lib/libomp.dylib /usr/local/lib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>ln -s /usr/local/opt/libomp/include/omp.h /usr/local/include
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> LIBOMP_PATH&lt;span style="color:#fe8019">=&lt;/span>/usr/local/lib/libomp.dylib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic"># And finally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>&lt;span style="color:#fabd2f">export&lt;/span> RUSTFLAGS&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#b8bb26">&amp;#34;-C link-arg=&lt;/span>$LIBOMP_PATH&lt;span style="color:#b8bb26">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>or creating a &lt;code>.cargo/config.toml&lt;/code> file inside the project directory and mentioning it there&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>[build]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>rustflags = [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span> &amp;#34;-C&amp;#34;, &amp;#34;link-arg=LIBOMP_PATH&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, that was simple.&lt;/p>
&lt;h2 id="searching-for-bottlenecks">Searching for bottlenecks&lt;/h2>
&lt;p>In order to optimize a program&amp;rsquo;s performance, CPU profiling tools like &lt;code>Perf&lt;/code> play a crucial role by providing detailed insights into where computational resources are being used. One powerful visualization tool generated by these profilers is the flamegraph, which offers a clear representation of a program&amp;rsquo;s CPU usage over time.&lt;/p>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/flame-graphu.svg" alt="flamegraph-of-fft-g1">&lt;/p>
&lt;p>The flamegraph displayed above illustrates the CPU time distribution of the c-kzg library&amp;rsquo;s &lt;code>fft_g1&lt;/code> benchmark. Upon analysis, it became evident that a significant portion of the execution time was spent in assembly code, highlighting potential areas for optimization. Further investigation on &lt;highlight>&lt;a href="https://github.com/protolambda/go-kzg">go-kzg&lt;/a>&lt;/highlight> revealed that the &lt;code>fft_g1&lt;/code> benchmark was indeed a performance bottleneck and stood out as a prime candidate for parallelization. By parallelizing this specific operation, we can improving the overall performance of the library.&lt;/p>
&lt;h2 id="parallelizing-fft_g1">Parallelizing fft_g1&lt;/h2>
&lt;p>The &lt;code>fft_g1&lt;/code> function calls the &lt;code>fft_g1_fast&lt;/code> function, which applies the &lt;em>divide-and-conquer&lt;/em> principle to divide a large problem into smaller subproblems, recursively solving each of them. The general procedure here is to distribute work (&lt;code>fft_f1_fast&lt;/code>s) among worker threads.&lt;/p>
&lt;p>The blst-from-scratch team implemented it as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">let&lt;/span> (lo, hi) &lt;span style="color:#fe8019">=&lt;/span> ret.split_at_mut(half);
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>rayon::join(
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">||&lt;/span> fft_g1_fast(lo, data, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> &lt;span style="color:#fe8019">||&lt;/span> fft_g1_fast(hi, &lt;span style="color:#fe8019">&amp;amp;&lt;/span>data[stride&lt;span style="color:#fe8019">..&lt;/span>], stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>&lt;span style="color:#fe8019">for&lt;/span> i &lt;span style="color:#fe8019">in&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>&lt;span style="color:#fe8019">..&lt;/span>half {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> &lt;span style="color:#fe8019">let&lt;/span> y_times_root &lt;span style="color:#fe8019">=&lt;/span> ret[i &lt;span style="color:#fe8019">+&lt;/span> half].mul(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>roots[i &lt;span style="color:#fe8019">*&lt;/span> roots_stride]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> ret[i &lt;span style="color:#fe8019">+&lt;/span> half] &lt;span style="color:#fe8019">=&lt;/span> ret[i].sub(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> ret[i] &lt;span style="color:#fe8019">=&lt;/span> ret[i].add_or_dbl(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a side note, &lt;code>rayon::join&lt;/code> spawns two threads, one executing each of the two closures.&lt;/p>
&lt;p>The C equivalent, on the other hand, was as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp parallel sections
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#8ec07c">#pragma omp section
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span> &lt;span style="color:#fabd2f">fft_g1_fast&lt;/span>(out, in, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, half);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#8ec07c">#pragma omp section
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> &lt;span style="color:#fabd2f">fft_g1_fast&lt;/span>(out &lt;span style="color:#fe8019">+&lt;/span> half, in &lt;span style="color:#fe8019">+&lt;/span> stride, stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, roots, roots_stride &lt;span style="color:#fe8019">*&lt;/span> &lt;span style="color:#d3869b">2&lt;/span>, half);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp parallel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>&lt;span style="color:#8ec07c">#pragma omp for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>&lt;span style="color:#8ec07c">&lt;/span>&lt;span style="color:#fe8019">for&lt;/span> (&lt;span style="color:#fabd2f">uint64_t&lt;/span> i &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>; i &lt;span style="color:#fe8019">&amp;lt;&lt;/span> half; i&lt;span style="color:#fe8019">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_t&lt;/span> y_times_root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_mul&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root, &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i &lt;span style="color:#fe8019">+&lt;/span> half], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>roots[i &lt;span style="color:#fe8019">*&lt;/span> roots_stride]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_sub&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i &lt;span style="color:#fe8019">+&lt;/span> half], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span> &lt;span style="color:#fabd2f">g1_add_or_dbl&lt;/span>(&lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>out[i], &lt;span style="color:#fe8019">&amp;amp;&lt;/span>y_times_root);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">19&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to parallel sections, I also used OpenMP&amp;rsquo;s parallel for-loop, because I noticed it yielded a &lt;strong>5% greater performance&lt;/strong> on my personal machine. Considering the &lt;code>ubuntu-latest&lt;/code> runner in GitHub Actions CI had only two available cores, the halves of the problem were shared among two threads where each ran the for-loop to do arithmetic operations on polynomial &lt;code>G1&lt;/code> points.&lt;/p>
&lt;p>In the above code snippets, &lt;code>fft_g1&lt;/code> calls &lt;code>fft_g1_fast&lt;/code>, which up to scale 16 should at most &lt;code>1 &amp;lt;&amp;lt; 15&lt;/code> times call itself recursively, where each such call will be distributed among the 2 threads. Since we&amp;rsquo;re computing &lt;code>fft_g1&lt;/code> up to scale 8, there should be &lt;code>(1 &amp;lt;&amp;lt; 7) + 1&lt;/code> tasks (not to be confused by OpenMP&amp;rsquo;s &lt;code>task&lt;/code> pragma directive!) for &lt;code>fft_g1_fast&lt;/code> or &lt;code>129&lt;/code> such tasks that will be run in parallel!&lt;/p>
&lt;h2 id="local-c-kzg-benchmark">Local c-kzg benchmark&lt;/h2>
&lt;p>Running on my personal computer with i5-7300HQ (4 threads overclocked at 3.50GHz), all mitigations turned off, and a custom Liquorix kernel, I was able to achieve the following results:&lt;/p>
&lt;table>
&lt;tr>&lt;th>Original c-kzg library&lt;/th>&lt;th>Parallelized c-kzg library&lt;/th>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>$ ./fft_g1_bench
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>*** Benchmarking FFT_g1, &lt;span style="color:#d3869b">1&lt;/span> second per test.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>fft_g1/scale_4 &lt;span style="color:#d3869b">1729769&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>fft_g1/scale_5 &lt;span style="color:#d3869b">4935085&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>fft_g1/scale_6 &lt;span style="color:#d3869b">12897731&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>fft_g1/scale_7 &lt;span style="color:#d3869b">32022026&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>fft_g1/scale_8 &lt;span style="color:#d3869b">76552852&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>fft_g1/scale_9 &lt;span style="color:#d3869b">184970057&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>fft_g1/scale_10 &lt;span style="color:#d3869b">418273808&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>fft_g1/scale_11 &lt;span style="color:#d3869b">919499032&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>fft_g1/scale_12 &lt;span style="color:#d3869b">2025633037&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>fft_g1/scale_13 &lt;span style="color:#d3869b">4479830518&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>fft_g1/scale_14 &lt;span style="color:#d3869b">9754557496&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>fft_g1/scale_15 &lt;span style="color:#d3869b">21125613058&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>$ OMP_NUM_THREADS&lt;span style="color:#fe8019">=&lt;/span>&lt;span style="color:#d3869b">4&lt;/span> ./fft_g1_bench
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span>*** Benchmarking FFT_g1, &lt;span style="color:#d3869b">1&lt;/span> second per test.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span>fft_g1/scale_4 &lt;span style="color:#d3869b">839454&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span>fft_g1/scale_5 &lt;span style="color:#d3869b">2378457&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>fft_g1/scale_6 &lt;span style="color:#d3869b">6404191&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span>fft_g1/scale_7 &lt;span style="color:#d3869b">16325966&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span>fft_g1/scale_8 &lt;span style="color:#d3869b">38141754&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span>fft_g1/scale_9 &lt;span style="color:#d3869b">90948810&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span>fft_g1/scale_10 &lt;span style="color:#d3869b">204757690&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span>fft_g1/scale_11 &lt;span style="color:#d3869b">457509973&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span>fft_g1/scale_12 &lt;span style="color:#d3869b">1006089135&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>fft_g1/scale_13 &lt;span style="color:#d3869b">2240095284&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>fft_g1/scale_14 &lt;span style="color:#d3869b">4879448286&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>fft_g1/scale_15 &lt;span style="color:#d3869b">10650876381&lt;/span> ns/op
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>&lt;/table>
&lt;p>That&amp;rsquo;s &lt;strong>twice as fast&lt;/strong> with as little effort as putting in a few pragmas!&lt;/p>
&lt;h2 id="github-actions-ci-benchmarks">GitHub Actions CI benchmarks&lt;/h2>
&lt;p>The &lt;code>fft_g1&lt;/code> benchmark was limited to scale 7 because the overall run time for the job exceeds the 6 hour limit if I were to benchmark it up to scale 16, as Criterion runs each iteration a couple of hundred times to produce more accurate results, and that used to automatically cancel other running CI jobs as jobs submitted to GitHub Actions are limited to 360 minutes.&lt;/p>
&lt;h3 id="benchmarking-blst-from-scratch">Benchmarking blst-from-scratch&lt;/h3>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/from-scratch-github-actions.png" alt="from-scratch-github-actions">&lt;/p>
&lt;p>From the above screenshot we can see that the parallelized version of the library ran &lt;code>1m 28s&lt;/code> shorter than its sequential version, and below are the results of sequential &lt;code>fft_g1&lt;/code> algorithm:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.6364 s (200 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [33.423 ms 33.785 ms 34.150 ms]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>of which the average run time for scale 7 was cut down by &lt;code>38.926%&lt;/code> by its parallel counterpart:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.3282 s (300 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [20.432 ms 20.634 ms 20.843 ms]
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6&lt;/span>&lt;span> change: [-39.822% -38.926% -38.001%] (p = 0.00 &amp;lt; 0.05)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7&lt;/span>&lt;span> Performance has improved.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="benchmarking-ckzg">Benchmarking ckzg&lt;/h3>
&lt;p>&lt;img src="https://belijzajac.dev/post-images/ckzg-github-actions.png" alt="ckzg-github-actions">&lt;/p>
&lt;p>The sequential version of the ckzg library ran &lt;code>2m 7s&lt;/code> faster than the same version of blst-from-scratch because it had other benchmarks that performed faster, though the parallelized version ran &lt;code>1m 2s&lt;/code> faster than its sequential version. Below are the results of the sequantial &lt;code>fft_g1&lt;/code> algorithm:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.8313 s (200 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [32.194 ms 32.471 ms 32.760 ms]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yet the parallel version of the &lt;code>fft_g1&lt;/code> algorithm performed much faster than it did for blst-from-scratch, even though both unparallelized versions for both teams performed evenly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 5.0701 s (300 iterations)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4&lt;/span>&lt;span>Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5&lt;/span>&lt;span>bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [16.854 ms 17.107 ms 17.439 ms]
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3d3d3d">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6&lt;/span>&lt;span> change: [-48.216% -47.318% -46.306%] (p = 0.00 &amp;lt; 0.05)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7&lt;/span>&lt;span> Performance has improved.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>OpenMP lets you quickly prototype what is possible to parallelize with the help of CPU profiling tools like Perf&lt;/li>
&lt;li>Criterion is actually a really nice benchmarking tool to measure performance, especially when integrated into CI&lt;/li>
&lt;/ul></description></item></channel></rss>