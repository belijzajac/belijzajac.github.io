<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Perf on belijzajac.dev</title><link>https://belijzajac.dev/tags/perf/</link><description>Recent content in Perf on belijzajac.dev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>blog@belijzajac.dev (belijzajac)</managingEditor><webMaster>blog@belijzajac.dev (belijzajac)</webMaster><copyright>Copyright Â© 2025 | CC BY-NC-SA 4.0</copyright><lastBuildDate>Tue, 16 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://belijzajac.dev/tags/perf/index.xml" rel="self" type="application/rss+xml"/><item><title>Outperforming Rayon with OpenMP</title><link>https://belijzajac.dev/outperforming-rayon-with-openmp/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><author>blog@belijzajac.dev (belijzajac)</author><guid>https://belijzajac.dev/outperforming-rayon-with-openmp/</guid><description>&lt;p&gt;&lt;img src="https://belijzajac.dev/post-images/rip-craberino.jpg" alt="rip-craberino"&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;For the Blockchain Technologies course, students were paired into groups and assigned to produce the fastest Rust library implementing the KZG10 cryptographic scheme. Two teams used the &lt;highlight&gt;&lt;a href="https://github.com/supranational/blst"&gt;blst&lt;/a&gt;&lt;/highlight&gt; backend, which is implemented in assembly and has direct bindings for Rust and C. The first team, &lt;highlight&gt;&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/blst"&gt;blst-from-scratch&lt;/a&gt;&lt;/highlight&gt;, used the Rust bindings provided by the blst library to produce an interface closer to &lt;highlight&gt;&lt;a href="https://github.com/benjaminion/c-kzg"&gt;c-kzg&lt;/a&gt;&lt;/highlight&gt;. The second team, which I was part of, worked on the &lt;highlight&gt;&lt;a href="https://github.com/grandinetech/rust-kzg/tree/main/ckzg"&gt;ckzg&lt;/a&gt;&lt;/highlight&gt; library in C. We were responsible for producing an implementation that could integrate into Rust via the C bindings provided by my team.&lt;/p&gt;
&lt;h2 id="choosing-the-right-tool-for-the-job"&gt;Choosing the right tool for the job&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a no-brainer for Rust programmers to choose &lt;code&gt;Rayon&lt;/code&gt; when it comes to writing parallel code, as there aren&amp;rsquo;t many other viable and easy-to-use options available. While Rust does offer alternatives like &lt;code&gt;std::thread&lt;/code&gt;, which provides access to native OS threads, the manual creation and management of threads can be cumbersome.&lt;/p&gt;
&lt;p&gt;When I was working on my C code, I had to decide on the best approach to parallelize it. My options included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread&lt;/code&gt;: A POSIX standard for thread creation and management.&lt;/li&gt;
&lt;li&gt;A popular third-party threadpool library from GitHub.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenMP&lt;/code&gt;: Parallel programming library for C and C++ without manual thread management.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose OpenMP because, during experimentation, I discovered it yielded the best results and was relatively straightforward to use. However, I encountered a challenge in integrating it with Rust to ensure compatibility across multiple platforms, starting with Linux and possibly macOS. Eventually, I came up with the following Bash script to automate the entire process of building and packaging shared libraries. Fortunately, OpenMP was integrated into Rust by either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exporting the &lt;code&gt;RUSTFLAGS&lt;/code&gt; environment variable pointing to the correct &lt;code&gt;libomp&lt;/code&gt; LLVM runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;# Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 2&lt;/span&gt;&lt;span&gt;apt install libomp-dev
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 3&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;export&lt;/span&gt; LIBOMP_PATH&lt;span style="color:#fe8019"&gt;=&lt;/span&gt;&lt;span style="color:#fe8019"&gt;$(&lt;/span&gt;find /usr/lib/llvm* -name libiomp5.so | head -n 1&lt;span style="color:#fe8019"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 4&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 5&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;# MacOS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 6&lt;/span&gt;&lt;span&gt;brew install libomp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 7&lt;/span&gt;&lt;span&gt;ln -s /usr/local/opt/libomp/lib/libomp.dylib /usr/local/lib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 8&lt;/span&gt;&lt;span&gt;ln -s /usr/local/opt/libomp/include/omp.h /usr/local/include
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 9&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;export&lt;/span&gt; LIBOMP_PATH&lt;span style="color:#fe8019"&gt;=&lt;/span&gt;/usr/local/lib/libomp.dylib
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;10&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style="color:#928374;font-style:italic"&gt;# And finally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fabd2f"&gt;export&lt;/span&gt; RUSTFLAGS&lt;span style="color:#fe8019"&gt;=&lt;/span&gt;&lt;span style="color:#b8bb26"&gt;&amp;#34;-C link-arg=&lt;/span&gt;$LIBOMP_PATH&lt;span style="color:#b8bb26"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;or creating a &lt;code&gt;.cargo/config.toml&lt;/code&gt; file inside the project directory and mentioning it there&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;[build]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;rustflags = [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt; &amp;#34;-C&amp;#34;, &amp;#34;link-arg=LIBOMP_PATH&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, that was simple.&lt;/p&gt;
&lt;h2 id="searching-for-bottlenecks"&gt;Searching for bottlenecks&lt;/h2&gt;
&lt;p&gt;In order to optimize a program&amp;rsquo;s performance, CPU profiling tools like &lt;code&gt;Perf&lt;/code&gt; play a crucial role by providing detailed insights into where computational resources are being used. One powerful visualization tool generated by these profilers is the flamegraph, which offers a clear representation of a program&amp;rsquo;s CPU usage over time.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://belijzajac.dev/post-images/flame-graphu.svg" alt="flamegraph-of-fft-g1"&gt;&lt;/p&gt;
&lt;p&gt;The flamegraph displayed above illustrates the CPU time distribution of the c-kzg library&amp;rsquo;s &lt;code&gt;fft_g1&lt;/code&gt; benchmark. Upon analysis, it became evident that a significant portion of the execution time was spent in assembly code, highlighting potential areas for optimization. Further investigation on &lt;highlight&gt;&lt;a href="https://github.com/protolambda/go-kzg"&gt;go-kzg&lt;/a&gt;&lt;/highlight&gt; revealed that the &lt;code&gt;fft_g1&lt;/code&gt; benchmark was indeed a performance bottleneck and stood out as a prime candidate for parallelization. By parallelizing this specific operation, we can improving the overall performance of the library.&lt;/p&gt;
&lt;h2 id="parallelizing-fft_g1"&gt;Parallelizing fft_g1&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;fft_g1&lt;/code&gt; function calls the &lt;code&gt;fft_g1_fast&lt;/code&gt; function, which applies the &lt;em&gt;divide-and-conquer&lt;/em&gt; principle to divide a large problem into smaller subproblems, recursively solving each of them. The general procedure here is to distribute work (&lt;code&gt;fft_f1_fast&lt;/code&gt;s) among worker threads.&lt;/p&gt;
&lt;p&gt;The blst-from-scratch team implemented it as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-rust" data-lang="rust"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fe8019"&gt;let&lt;/span&gt; (lo, hi) &lt;span style="color:#fe8019"&gt;=&lt;/span&gt; ret.split_at_mut(half);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 2&lt;/span&gt;&lt;span&gt;rayon::join(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 3&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fe8019"&gt;||&lt;/span&gt; fft_g1_fast(lo, data, stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, roots, roots_stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 4&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fe8019"&gt;||&lt;/span&gt; fft_g1_fast(hi, &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;data[stride&lt;span style="color:#fe8019"&gt;..&lt;/span&gt;], stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, roots, roots_stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 5&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 6&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style="color:#fe8019"&gt;for&lt;/span&gt; i &lt;span style="color:#fe8019"&gt;in&lt;/span&gt; &lt;span style="color:#d3869b"&gt;0&lt;/span&gt;&lt;span style="color:#fe8019"&gt;..&lt;/span&gt;half {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 8&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fe8019"&gt;let&lt;/span&gt; y_times_root &lt;span style="color:#fe8019"&gt;=&lt;/span&gt; ret[i &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; half].mul(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;roots[i &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; roots_stride]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 9&lt;/span&gt;&lt;span&gt; ret[i &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; half] &lt;span style="color:#fe8019"&gt;=&lt;/span&gt; ret[i].sub(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;y_times_root);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;10&lt;/span&gt;&lt;span&gt; ret[i] &lt;span style="color:#fe8019"&gt;=&lt;/span&gt; ret[i].add_or_dbl(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;y_times_root);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a side note, &lt;code&gt;rayon::join&lt;/code&gt; spawns two threads, one executing each of the two closures.&lt;/p&gt;
&lt;p&gt;The C equivalent, on the other hand, was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;#pragma omp parallel sections
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 2&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 3&lt;/span&gt;&lt;span&gt; &lt;span style="color:#8ec07c"&gt;#pragma omp section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 4&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 5&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;fft_g1_fast&lt;/span&gt;(out, in, stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, roots, roots_stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, half);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 6&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 7&lt;/span&gt;&lt;span&gt; &lt;span style="color:#8ec07c"&gt;#pragma omp section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 9&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;fft_g1_fast&lt;/span&gt;(out &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; half, in &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; stride, stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, roots, roots_stride &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; &lt;span style="color:#d3869b"&gt;2&lt;/span&gt;, half);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;10&lt;/span&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;11&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;#pragma omp parallel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;#pragma omp for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;14&lt;/span&gt;&lt;span&gt;&lt;span style="color:#8ec07c"&gt;&lt;/span&gt;&lt;span style="color:#fe8019"&gt;for&lt;/span&gt; (&lt;span style="color:#fabd2f"&gt;uint64_t&lt;/span&gt; i &lt;span style="color:#fe8019"&gt;=&lt;/span&gt; &lt;span style="color:#d3869b"&gt;0&lt;/span&gt;; i &lt;span style="color:#fe8019"&gt;&amp;lt;&lt;/span&gt; half; i&lt;span style="color:#fe8019"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;15&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;g1_t&lt;/span&gt; y_times_root;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;16&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;g1_mul&lt;/span&gt;(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;y_times_root, &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;out[i &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; half], &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;roots[i &lt;span style="color:#fe8019"&gt;*&lt;/span&gt; roots_stride]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;17&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;g1_sub&lt;/span&gt;(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;out[i &lt;span style="color:#fe8019"&gt;+&lt;/span&gt; half], &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;out[i], &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;y_times_root);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;18&lt;/span&gt;&lt;span&gt; &lt;span style="color:#fabd2f"&gt;g1_add_or_dbl&lt;/span&gt;(&lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;out[i], &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;out[i], &lt;span style="color:#fe8019"&gt;&amp;amp;&lt;/span&gt;y_times_root);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;19&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition to parallel sections, I also used OpenMP&amp;rsquo;s parallel for-loop, because I noticed it yielded a &lt;strong&gt;5% greater performance&lt;/strong&gt; on my personal machine. Considering the &lt;code&gt;ubuntu-latest&lt;/code&gt; runner in GitHub Actions CI had only two available cores, the halves of the problem were shared among two threads where each ran the for-loop to do arithmetic operations on polynomial &lt;code&gt;G1&lt;/code&gt; points.&lt;/p&gt;
&lt;p&gt;In the above code snippets, &lt;code&gt;fft_g1&lt;/code&gt; calls &lt;code&gt;fft_g1_fast&lt;/code&gt;, which up to scale 16 should at most &lt;code&gt;1 &amp;lt;&amp;lt; 15&lt;/code&gt; times call itself recursively, where each such call will be distributed among the 2 threads. Since we&amp;rsquo;re computing &lt;code&gt;fft_g1&lt;/code&gt; up to scale 8, there should be &lt;code&gt;(1 &amp;lt;&amp;lt; 7) + 1&lt;/code&gt; tasks (not to be confused by OpenMP&amp;rsquo;s &lt;code&gt;task&lt;/code&gt; pragma directive!) for &lt;code&gt;fft_g1_fast&lt;/code&gt; or &lt;code&gt;129&lt;/code&gt; such tasks that will be run in parallel!&lt;/p&gt;
&lt;h2 id="local-c-kzg-benchmark"&gt;Local c-kzg benchmark&lt;/h2&gt;
&lt;p&gt;Running on my personal computer with i5-7300HQ (4 threads overclocked at 3.50GHz), all mitigations turned off, and a custom Liquorix kernel, I was able to achieve the following results:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Original c-kzg library&lt;/th&gt;&lt;th&gt;Parallelized c-kzg library&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 1&lt;/span&gt;&lt;span&gt;$ ./fft_g1_bench
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 2&lt;/span&gt;&lt;span&gt;*** Benchmarking FFT_g1, &lt;span style="color:#d3869b"&gt;1&lt;/span&gt; second per test.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 3&lt;/span&gt;&lt;span&gt;fft_g1/scale_4 &lt;span style="color:#d3869b"&gt;1729769&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 4&lt;/span&gt;&lt;span&gt;fft_g1/scale_5 &lt;span style="color:#d3869b"&gt;4935085&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 5&lt;/span&gt;&lt;span&gt;fft_g1/scale_6 &lt;span style="color:#d3869b"&gt;12897731&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 6&lt;/span&gt;&lt;span&gt;fft_g1/scale_7 &lt;span style="color:#d3869b"&gt;32022026&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 7&lt;/span&gt;&lt;span&gt;fft_g1/scale_8 &lt;span style="color:#d3869b"&gt;76552852&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 8&lt;/span&gt;&lt;span&gt;fft_g1/scale_9 &lt;span style="color:#d3869b"&gt;184970057&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 9&lt;/span&gt;&lt;span&gt;fft_g1/scale_10 &lt;span style="color:#d3869b"&gt;418273808&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;10&lt;/span&gt;&lt;span&gt;fft_g1/scale_11 &lt;span style="color:#d3869b"&gt;919499032&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;11&lt;/span&gt;&lt;span&gt;fft_g1/scale_12 &lt;span style="color:#d3869b"&gt;2025633037&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;12&lt;/span&gt;&lt;span&gt;fft_g1/scale_13 &lt;span style="color:#d3869b"&gt;4479830518&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;13&lt;/span&gt;&lt;span&gt;fft_g1/scale_14 &lt;span style="color:#d3869b"&gt;9754557496&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;14&lt;/span&gt;&lt;span&gt;fft_g1/scale_15 &lt;span style="color:#d3869b"&gt;21125613058&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 1&lt;/span&gt;&lt;span&gt;$ OMP_NUM_THREADS&lt;span style="color:#fe8019"&gt;=&lt;/span&gt;&lt;span style="color:#d3869b"&gt;4&lt;/span&gt; ./fft_g1_bench
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 2&lt;/span&gt;&lt;span&gt;*** Benchmarking FFT_g1, &lt;span style="color:#d3869b"&gt;1&lt;/span&gt; second per test.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 3&lt;/span&gt;&lt;span&gt;fft_g1/scale_4 &lt;span style="color:#d3869b"&gt;839454&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 4&lt;/span&gt;&lt;span&gt;fft_g1/scale_5 &lt;span style="color:#d3869b"&gt;2378457&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 5&lt;/span&gt;&lt;span&gt;fft_g1/scale_6 &lt;span style="color:#d3869b"&gt;6404191&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 6&lt;/span&gt;&lt;span&gt;fft_g1/scale_7 &lt;span style="color:#d3869b"&gt;16325966&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 7&lt;/span&gt;&lt;span&gt;fft_g1/scale_8 &lt;span style="color:#d3869b"&gt;38141754&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 8&lt;/span&gt;&lt;span&gt;fft_g1/scale_9 &lt;span style="color:#d3869b"&gt;90948810&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt; 9&lt;/span&gt;&lt;span&gt;fft_g1/scale_10 &lt;span style="color:#d3869b"&gt;204757690&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;10&lt;/span&gt;&lt;span&gt;fft_g1/scale_11 &lt;span style="color:#d3869b"&gt;457509973&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;11&lt;/span&gt;&lt;span&gt;fft_g1/scale_12 &lt;span style="color:#d3869b"&gt;1006089135&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;12&lt;/span&gt;&lt;span&gt;fft_g1/scale_13 &lt;span style="color:#d3869b"&gt;2240095284&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;13&lt;/span&gt;&lt;span&gt;fft_g1/scale_14 &lt;span style="color:#d3869b"&gt;4879448286&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;14&lt;/span&gt;&lt;span&gt;fft_g1/scale_15 &lt;span style="color:#d3869b"&gt;10650876381&lt;/span&gt; ns/op
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;That&amp;rsquo;s &lt;strong&gt;twice as fast&lt;/strong&gt; with as little effort as putting in a few pragmas!&lt;/p&gt;
&lt;h2 id="github-actions-ci-benchmarks"&gt;GitHub Actions CI benchmarks&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;fft_g1&lt;/code&gt; benchmark was limited to scale 7 because the overall run time for the job exceeds the 6 hour limit if I were to benchmark it up to scale 16, as Criterion runs each iteration a couple of hundred times to produce more accurate results, and that used to automatically cancel other running CI jobs as jobs submitted to GitHub Actions are limited to 360 minutes.&lt;/p&gt;
&lt;h3 id="benchmarking-blst-from-scratch"&gt;Benchmarking blst-from-scratch&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://belijzajac.dev/post-images/from-scratch-github-actions.png" alt="from-scratch-github-actions"&gt;&lt;/p&gt;
&lt;p&gt;From the above screenshot we can see that the parallelized version of the library ran &lt;code&gt;1m 28s&lt;/code&gt; shorter than its sequential version, and below are the results of sequential &lt;code&gt;fft_g1&lt;/code&gt; algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.6364 s (200 iterations)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;5&lt;/span&gt;&lt;span&gt;bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [33.423 ms 33.785 ms 34.150 ms]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;of which the average run time for scale 7 was cut down by &lt;code&gt;38.926%&lt;/code&gt; by its parallel counterpart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.3282 s (300 iterations)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;5&lt;/span&gt;&lt;span&gt;bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [20.432 ms 20.634 ms 20.843 ms]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;6&lt;/span&gt;&lt;span&gt; change: [-39.822% -38.926% -38.001%] (p = 0.00 &amp;lt; 0.05)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;7&lt;/span&gt;&lt;span&gt; Performance has improved.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="benchmarking-ckzg"&gt;Benchmarking ckzg&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://belijzajac.dev/post-images/ckzg-github-actions.png" alt="ckzg-github-actions"&gt;&lt;/p&gt;
&lt;p&gt;The sequential version of the ckzg library ran &lt;code&gt;2m 7s&lt;/code&gt; faster than the same version of blst-from-scratch because it had other benchmarks that performed faster, though the parallelized version ran &lt;code&gt;1m 2s&lt;/code&gt; faster than its sequential version. Below are the results of the sequantial &lt;code&gt;fft_g1&lt;/code&gt; algorithm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 6.8313 s (200 iterations)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;5&lt;/span&gt;&lt;span&gt;bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [32.194 ms 32.471 ms 32.760 ms]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yet the parallel version of the &lt;code&gt;fft_g1&lt;/code&gt; algorithm performed much faster than it did for blst-from-scratch, even though both unparallelized versions for both teams performed evenly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;1&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;2&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Warming up for 3.0000 s
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;3&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Collecting 100 samples in estimated 5.0701 s (300 iterations)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;4&lt;/span&gt;&lt;span&gt;Benchmarking bench_fft_g1 scale: &amp;#39;7&amp;#39;: Analyzing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;5&lt;/span&gt;&lt;span&gt;bench_fft_g1 scale: &amp;#39;7&amp;#39; time: [16.854 ms 17.107 ms 17.439 ms]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex; background-color:#3d3d3d"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;6&lt;/span&gt;&lt;span&gt; change: [-48.216% -47.318% -46.306%] (p = 0.00 &amp;lt; 0.05)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"&gt;7&lt;/span&gt;&lt;span&gt; Performance has improved.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP lets you quickly prototype what is possible to parallelize with the help of CPU profiling tools like Perf&lt;/li&gt;
&lt;li&gt;Criterion is actually a really nice benchmarking tool to measure performance, especially when integrated into CI&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>